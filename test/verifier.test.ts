import Hash from "../src/hash";
import Verifier from "../src/verifier";

/**
 * Dummy test
 */
describe("Verifier Tests", () => {
  it('verifies proof 1', () => {
    const proof = [
      new Uint8Array([211, 205, 191, 93, 216, 21, 121, 238, 236, 72, 113, 35, 106, 42, 162, 40, 40, 239, 38, 84, 242, 144, 35, 195, 43, 207, 254, 231, 181, 155, 215, 21]),
      new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      new Uint8Array([43, 18, 20, 133, 155, 152, 218, 127, 160, 217, 250, 224, 49, 20, 63, 48, 50, 212, 157, 58, 141, 152, 105, 26, 206, 220, 132, 62, 111, 37, 216, 43]),
      new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      new Uint8Array([72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72]),
      new Uint8Array([64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64]),
    ]

    expect(Verifier.verify(proof)).toBe(true);
  });

  it('verifies proof 3', () => {
    const proof = [
      new Uint8Array([211, 205, 191, 93, 216, 21, 121, 238, 236, 72, 113, 35, 106, 42, 162, 40, 40, 239, 38, 84, 242, 144, 35, 195, 43, 207, 254, 231, 181, 155, 215, 21]),
      new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
      new Uint8Array([54, 69, 215, 181, 28, 29, 243, 217, 117, 114, 255, 236, 143, 149, 175, 239, 135, 83, 98, 120, 210, 182, 118, 255, 0, 47, 8, 179, 121, 140, 99, 1]),
      new Uint8Array([32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32]),
      new Uint8Array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]),
    ];

    expect(Verifier.verify(proof)).toBe(false);
  });




})
